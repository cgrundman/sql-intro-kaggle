{"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":337535,"sourceType":"datasetVersion","datasetId":22685}],"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"**This notebook is an exercise in the [SQL](https://www.kaggle.com/learn/intro-to-sql) course.  You can reference the tutorial at [this link](https://www.kaggle.com/dansbecker/joining-data).**\n\n---\n","metadata":{}},{"cell_type":"markdown","source":"# Introduction\n\n[Stack Overflow](https://stackoverflow.com/) is a widely beloved question and answer site for technical questions. You'll probably use it yourself as you keep using SQL (or any programming language). \n\nTheir data is publicly available. What cool things do you think it would be useful for?\n\nHere's one idea:\nYou could set up a service that identifies the Stack Overflow users who have demonstrated expertise with a specific technology by answering related questions about it, so someone could hire those experts for in-depth help.\n\nIn this exercise, you'll write the SQL queries that might serve as the foundation for this type of service.\n\nAs usual, run the following cell to set up our feedback system before moving on.","metadata":{}},{"cell_type":"code","source":"# Set up feedback system\nfrom learntools.core import binder\nbinder.bind(globals())\nfrom learntools.sql.ex6 import *\nprint(\"Setup Complete\")","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-19T15:56:28.679411Z","iopub.execute_input":"2024-12-19T15:56:28.679784Z","iopub.status.idle":"2024-12-19T15:56:28.686018Z","shell.execute_reply.started":"2024-12-19T15:56:28.679756Z","shell.execute_reply":"2024-12-19T15:56:28.684646Z"}},"outputs":[{"name":"stdout","text":"Setup Complete\n","output_type":"stream"}],"execution_count":4},{"cell_type":"markdown","source":"Run the next cell to fetch the `stackoverflow` dataset.","metadata":{}},{"cell_type":"code","source":"from google.cloud import bigquery\n\n# Create a \"Client\" object\nclient = bigquery.Client()\n\n# Construct a reference to the \"stackoverflow\" dataset\ndataset_ref = client.dataset(\"stackoverflow\", project=\"bigquery-public-data\")\n\n# API request - fetch the dataset\ndataset = client.get_dataset(dataset_ref)","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-19T15:56:30.995818Z","iopub.execute_input":"2024-12-19T15:56:30.996203Z","iopub.status.idle":"2024-12-19T15:56:31.688296Z","shell.execute_reply.started":"2024-12-19T15:56:30.996172Z","shell.execute_reply":"2024-12-19T15:56:31.687036Z"}},"outputs":[{"name":"stdout","text":"Using Kaggle's public dataset BigQuery integration.\n","output_type":"stream"}],"execution_count":5},{"cell_type":"markdown","source":"# Exercises\n\n### 1) Explore the data\n\nBefore writing queries or **JOIN** clauses, you'll want to see what tables are available. \n\n*Hint*: Tab completion is helpful whenever you can't remember a command. Type `client.` and then hit the tab key. Don't forget the period before hitting tab.","metadata":{}},{"cell_type":"code","source":"# Get a list of available tables\ntables = client.list_tables(dataset)\nlist_of_tables = [table.table_id for table in tables] # Your code here\n\n# Print your answer\nprint(list_of_tables)\n\n# Check your answer\nq_1.check()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-19T15:57:50.086396Z","iopub.execute_input":"2024-12-19T15:57:50.086756Z","iopub.status.idle":"2024-12-19T15:57:50.392269Z","shell.execute_reply.started":"2024-12-19T15:57:50.086727Z","shell.execute_reply":"2024-12-19T15:57:50.391310Z"}},"outputs":[{"name":"stdout","text":"['badges', 'comments', 'post_history', 'post_links', 'posts_answers', 'posts_moderator_nomination', 'posts_orphaned_tag_wiki', 'posts_privilege_wiki', 'posts_questions', 'posts_tag_wiki', 'posts_tag_wiki_excerpt', 'posts_wiki_placeholder', 'stackoverflow_posts', 'tags', 'users', 'votes']\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.16666666666666666, \"interactionType\": 1, \"questionType\": 1, \"questionId\": \"1_ListSOTables\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}],"execution_count":9},{"cell_type":"markdown","source":"For the solution, uncomment the line below.","metadata":{}},{"cell_type":"code","source":"#q_1.solution()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-19T15:57:55.779361Z","iopub.execute_input":"2024-12-19T15:57:55.779744Z","iopub.status.idle":"2024-12-19T15:57:55.784533Z","shell.execute_reply.started":"2024-12-19T15:57:55.779708Z","shell.execute_reply":"2024-12-19T15:57:55.783190Z"}},"outputs":[],"execution_count":10},{"cell_type":"markdown","source":"### 2) Review relevant tables\n\nIf you are interested in people who answer questions on a given topic, the `posts_answers` table is a natural place to look. Run the following cell, and look at the output.","metadata":{}},{"cell_type":"code","source":"# Construct a reference to the \"posts_answers\" table\nanswers_table_ref = dataset_ref.table(\"posts_answers\")\n\n# API request - fetch the table\nanswers_table = client.get_table(answers_table_ref)\n\n# Preview the first five lines of the \"posts_answers\" table\nclient.list_rows(answers_table, max_results=5).to_dataframe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-19T15:58:21.248510Z","iopub.execute_input":"2024-12-19T15:58:21.248884Z","iopub.status.idle":"2024-12-19T15:58:22.252238Z","shell.execute_reply.started":"2024-12-19T15:58:21.248854Z","shell.execute_reply":"2024-12-19T15:58:22.251185Z"}},"outputs":[{"execution_count":11,"output_type":"execute_result","data":{"text/plain":"     id title                                               body  \\\n0    18  None  <p>For a table like this:</p>\\n\\n<pre><code>CR...   \n1   165  None  <p>You can use a <a href=\"http://sharpdevelop....   \n2  1028  None  <p>The VB code looks something like this:</p>\\...   \n3  1073  None  <p>My first choice would be a dedicated heap t...   \n4  1260  None  <p>I found the answer. all you have to do is a...   \n\n  accepted_answer_id answer_count  comment_count community_owned_date  \\\n0               None         None              2                  NaT   \n1               None         None              0                  NaT   \n2               None         None              0                  NaT   \n3               None         None              0                  NaT   \n4               None         None              0                  NaT   \n\n                     creation_date favorite_count  \\\n0 2008-08-01 05:12:44.193000+00:00           None   \n1 2008-08-01 18:04:25.023000+00:00           None   \n2 2008-08-04 04:58:40.300000+00:00           None   \n3 2008-08-04 07:51:02.997000+00:00           None   \n4 2008-08-04 14:06:02.863000+00:00           None   \n\n                last_activity_date                   last_edit_date  \\\n0 2016-06-02 05:56:26.060000+00:00 2016-06-02 05:56:26.060000+00:00   \n1 2019-04-06 14:03:51.080000+00:00 2019-04-06 14:03:51.080000+00:00   \n2 2013-02-07 13:22:14.680000+00:00 2013-02-07 13:22:14.680000+00:00   \n3 2015-09-01 17:32:32.120000+00:00 2015-09-01 17:32:32.120000+00:00   \n4 2016-12-20 08:38:48.867000+00:00 2016-12-20 08:38:48.867000+00:00   \n\n  last_editor_display_name  last_editor_user_id owner_display_name  \\\n0              Jeff Atwood               126039             phpguy   \n1                     None              1721793        user2189331   \n2                     None               395659        user2189331   \n3                     None                45459        user2189331   \n4                     None              1221571                Jin   \n\n   owner_user_id  parent_id  post_type_id  score  tags view_count  \n0           <NA>         17             2     59  None       None  \n1           <NA>        145             2     10  None       None  \n2           <NA>        947             2      8  None       None  \n3           <NA>       1069             2     29  None       None  \n4           <NA>       1229             2      1  None       None  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>title</th>\n      <th>body</th>\n      <th>accepted_answer_id</th>\n      <th>answer_count</th>\n      <th>comment_count</th>\n      <th>community_owned_date</th>\n      <th>creation_date</th>\n      <th>favorite_count</th>\n      <th>last_activity_date</th>\n      <th>last_edit_date</th>\n      <th>last_editor_display_name</th>\n      <th>last_editor_user_id</th>\n      <th>owner_display_name</th>\n      <th>owner_user_id</th>\n      <th>parent_id</th>\n      <th>post_type_id</th>\n      <th>score</th>\n      <th>tags</th>\n      <th>view_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>18</td>\n      <td>None</td>\n      <td>&lt;p&gt;For a table like this:&lt;/p&gt;\\n\\n&lt;pre&gt;&lt;code&gt;CR...</td>\n      <td>None</td>\n      <td>None</td>\n      <td>2</td>\n      <td>NaT</td>\n      <td>2008-08-01 05:12:44.193000+00:00</td>\n      <td>None</td>\n      <td>2016-06-02 05:56:26.060000+00:00</td>\n      <td>2016-06-02 05:56:26.060000+00:00</td>\n      <td>Jeff Atwood</td>\n      <td>126039</td>\n      <td>phpguy</td>\n      <td>&lt;NA&gt;</td>\n      <td>17</td>\n      <td>2</td>\n      <td>59</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>165</td>\n      <td>None</td>\n      <td>&lt;p&gt;You can use a &lt;a href=\"http://sharpdevelop....</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>NaT</td>\n      <td>2008-08-01 18:04:25.023000+00:00</td>\n      <td>None</td>\n      <td>2019-04-06 14:03:51.080000+00:00</td>\n      <td>2019-04-06 14:03:51.080000+00:00</td>\n      <td>None</td>\n      <td>1721793</td>\n      <td>user2189331</td>\n      <td>&lt;NA&gt;</td>\n      <td>145</td>\n      <td>2</td>\n      <td>10</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>1028</td>\n      <td>None</td>\n      <td>&lt;p&gt;The VB code looks something like this:&lt;/p&gt;\\...</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>NaT</td>\n      <td>2008-08-04 04:58:40.300000+00:00</td>\n      <td>None</td>\n      <td>2013-02-07 13:22:14.680000+00:00</td>\n      <td>2013-02-07 13:22:14.680000+00:00</td>\n      <td>None</td>\n      <td>395659</td>\n      <td>user2189331</td>\n      <td>&lt;NA&gt;</td>\n      <td>947</td>\n      <td>2</td>\n      <td>8</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>1073</td>\n      <td>None</td>\n      <td>&lt;p&gt;My first choice would be a dedicated heap t...</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>NaT</td>\n      <td>2008-08-04 07:51:02.997000+00:00</td>\n      <td>None</td>\n      <td>2015-09-01 17:32:32.120000+00:00</td>\n      <td>2015-09-01 17:32:32.120000+00:00</td>\n      <td>None</td>\n      <td>45459</td>\n      <td>user2189331</td>\n      <td>&lt;NA&gt;</td>\n      <td>1069</td>\n      <td>2</td>\n      <td>29</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>1260</td>\n      <td>None</td>\n      <td>&lt;p&gt;I found the answer. all you have to do is a...</td>\n      <td>None</td>\n      <td>None</td>\n      <td>0</td>\n      <td>NaT</td>\n      <td>2008-08-04 14:06:02.863000+00:00</td>\n      <td>None</td>\n      <td>2016-12-20 08:38:48.867000+00:00</td>\n      <td>2016-12-20 08:38:48.867000+00:00</td>\n      <td>None</td>\n      <td>1221571</td>\n      <td>Jin</td>\n      <td>&lt;NA&gt;</td>\n      <td>1229</td>\n      <td>2</td>\n      <td>1</td>\n      <td>None</td>\n      <td>None</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":11},{"cell_type":"markdown","source":"It isn't clear yet how to find users who answered questions on any given topic. But `posts_answers` has a `parent_id` column. If you are familiar with the Stack Overflow site, you might figure out that the `parent_id` is the question each post is answering.\n\nLook at `posts_questions` using the cell below.","metadata":{}},{"cell_type":"code","source":"# Construct a reference to the \"posts_questions\" table\nquestions_table_ref = dataset_ref.table(\"posts_questions\")\n\n# API request - fetch the table\nquestions_table = client.get_table(questions_table_ref)\n\n# Preview the first five lines of the \"posts_questions\" table\nclient.list_rows(questions_table, max_results=5).to_dataframe()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-19T15:58:37.825387Z","iopub.execute_input":"2024-12-19T15:58:37.825778Z","iopub.status.idle":"2024-12-19T15:58:39.016061Z","shell.execute_reply.started":"2024-12-19T15:58:37.825746Z","shell.execute_reply":"2024-12-19T15:58:39.014794Z"}},"outputs":[{"execution_count":12,"output_type":"execute_result","data":{"text/plain":"       id                                              title  \\\n0  320268          Html.ActionLink doesn’t render # properly   \n1  324003                                Primitive recursion   \n2  390605                                 While vs. Do While   \n3  413246                        Protect ASP.NET Source code   \n4  454921  Difference between \"int[] myArray\" and \"int my...   \n\n                                                body  accepted_answer_id  \\\n0  <p>When using Html.ActionLink passing a string...                <NA>   \n1  <p>how  will i define the function 'simplify' ...                <NA>   \n2  <p>I've seen both the blocks of code in use se...              390608   \n3  <p>Im currently doing some research in how to ...                <NA>   \n4  <blockquote>\\n  <p><strong>Possible Duplicate:...              454928   \n\n   answer_count  comment_count community_owned_date  \\\n0             0              0                  NaT   \n1             0              0                  NaT   \n2             0              0                  NaT   \n3             0              0                  NaT   \n4             0              0                  NaT   \n\n                     creation_date  favorite_count  \\\n0 2008-11-26 10:42:37.477000+00:00               0   \n1 2008-11-27 15:12:37.497000+00:00               0   \n2 2008-12-24 01:49:54.230000+00:00               2   \n3 2009-01-05 14:23:51.040000+00:00               0   \n4 2009-01-18 10:22:52.177000+00:00               0   \n\n                last_activity_date                   last_edit_date  \\\n0 2009-02-06 20:13:54.370000+00:00                              NaT   \n1 2012-09-25 19:54:40.597000+00:00 2012-09-25 19:54:40.597000+00:00   \n2 2008-12-24 03:08:55.897000+00:00                              NaT   \n3 2009-03-24 21:30:22.370000+00:00 2009-01-05 14:42:28.257000+00:00   \n4 2009-01-18 10:30:50.930000+00:00 2017-05-23 11:49:26.567000+00:00   \n\n  last_editor_display_name  last_editor_user_id owner_display_name  \\\n0                     None                 <NA>              Paulo   \n1                   Marcin                 1288               None   \n2                     None                 <NA>          Unkwntech   \n3             Tom Anderson                13502            Velnias   \n4                     None                   -1       Evan Fosmark   \n\n   owner_user_id parent_id  post_type_id  score  \\\n0           <NA>      None             1      0   \n1          41000      None             1      0   \n2            115      None             1      0   \n3           <NA>      None             1      0   \n4          49701      None             1      0   \n\n                                                tags  view_count  \n0                                        asp.net-mvc         390  \n1  haskell|lambda|functional-programming|lambda-c...         497  \n2                            language-agnostic|loops       11262  \n3                     asp.net|deployment|obfuscation        4823  \n4                                        java|arrays         798  ","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>title</th>\n      <th>body</th>\n      <th>accepted_answer_id</th>\n      <th>answer_count</th>\n      <th>comment_count</th>\n      <th>community_owned_date</th>\n      <th>creation_date</th>\n      <th>favorite_count</th>\n      <th>last_activity_date</th>\n      <th>last_edit_date</th>\n      <th>last_editor_display_name</th>\n      <th>last_editor_user_id</th>\n      <th>owner_display_name</th>\n      <th>owner_user_id</th>\n      <th>parent_id</th>\n      <th>post_type_id</th>\n      <th>score</th>\n      <th>tags</th>\n      <th>view_count</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>320268</td>\n      <td>Html.ActionLink doesn’t render # properly</td>\n      <td>&lt;p&gt;When using Html.ActionLink passing a string...</td>\n      <td>&lt;NA&gt;</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaT</td>\n      <td>2008-11-26 10:42:37.477000+00:00</td>\n      <td>0</td>\n      <td>2009-02-06 20:13:54.370000+00:00</td>\n      <td>NaT</td>\n      <td>None</td>\n      <td>&lt;NA&gt;</td>\n      <td>Paulo</td>\n      <td>&lt;NA&gt;</td>\n      <td>None</td>\n      <td>1</td>\n      <td>0</td>\n      <td>asp.net-mvc</td>\n      <td>390</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>324003</td>\n      <td>Primitive recursion</td>\n      <td>&lt;p&gt;how  will i define the function 'simplify' ...</td>\n      <td>&lt;NA&gt;</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaT</td>\n      <td>2008-11-27 15:12:37.497000+00:00</td>\n      <td>0</td>\n      <td>2012-09-25 19:54:40.597000+00:00</td>\n      <td>2012-09-25 19:54:40.597000+00:00</td>\n      <td>Marcin</td>\n      <td>1288</td>\n      <td>None</td>\n      <td>41000</td>\n      <td>None</td>\n      <td>1</td>\n      <td>0</td>\n      <td>haskell|lambda|functional-programming|lambda-c...</td>\n      <td>497</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>390605</td>\n      <td>While vs. Do While</td>\n      <td>&lt;p&gt;I've seen both the blocks of code in use se...</td>\n      <td>390608</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaT</td>\n      <td>2008-12-24 01:49:54.230000+00:00</td>\n      <td>2</td>\n      <td>2008-12-24 03:08:55.897000+00:00</td>\n      <td>NaT</td>\n      <td>None</td>\n      <td>&lt;NA&gt;</td>\n      <td>Unkwntech</td>\n      <td>115</td>\n      <td>None</td>\n      <td>1</td>\n      <td>0</td>\n      <td>language-agnostic|loops</td>\n      <td>11262</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>413246</td>\n      <td>Protect ASP.NET Source code</td>\n      <td>&lt;p&gt;Im currently doing some research in how to ...</td>\n      <td>&lt;NA&gt;</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaT</td>\n      <td>2009-01-05 14:23:51.040000+00:00</td>\n      <td>0</td>\n      <td>2009-03-24 21:30:22.370000+00:00</td>\n      <td>2009-01-05 14:42:28.257000+00:00</td>\n      <td>Tom Anderson</td>\n      <td>13502</td>\n      <td>Velnias</td>\n      <td>&lt;NA&gt;</td>\n      <td>None</td>\n      <td>1</td>\n      <td>0</td>\n      <td>asp.net|deployment|obfuscation</td>\n      <td>4823</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>454921</td>\n      <td>Difference between \"int[] myArray\" and \"int my...</td>\n      <td>&lt;blockquote&gt;\\n  &lt;p&gt;&lt;strong&gt;Possible Duplicate:...</td>\n      <td>454928</td>\n      <td>0</td>\n      <td>0</td>\n      <td>NaT</td>\n      <td>2009-01-18 10:22:52.177000+00:00</td>\n      <td>0</td>\n      <td>2009-01-18 10:30:50.930000+00:00</td>\n      <td>2017-05-23 11:49:26.567000+00:00</td>\n      <td>None</td>\n      <td>-1</td>\n      <td>Evan Fosmark</td>\n      <td>49701</td>\n      <td>None</td>\n      <td>1</td>\n      <td>0</td>\n      <td>java|arrays</td>\n      <td>798</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}],"execution_count":12},{"cell_type":"markdown","source":"Are there any fields that identify what topic or technology each question is about? If so, how could you find the IDs of users who answered questions about a specific topic?\n\nThink about it, and then check the solution by running the code in the next cell.","metadata":{}},{"cell_type":"code","source":"# Check your answer (Run this code cell to receive credit!)\nq_2.solution()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-19T15:58:53.996758Z","iopub.execute_input":"2024-12-19T15:58:53.997166Z","iopub.status.idle":"2024-12-19T15:58:54.005317Z","shell.execute_reply.started":"2024-12-19T15:58:53.997132Z","shell.execute_reply":"2024-12-19T15:58:54.004253Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 3, \"questionType\": 4, \"questionId\": \"2_HowToFindExperts\", \"learnToolsVersion\": \"0.3.4\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Solution: \n`posts_questions` has a column called `tags` which lists the topics/technologies each question is about.\n\n`posts_answers` has a column called `parent_id` which identifies the ID of the question each answer is responding to.\n`posts_answers` also has an `owner_user_id` column which specifies the ID of the user who answered the question.\n\nYou can join these two tables to:\n- determine the `tags` for each answer, and then\n- select the `owner_user_id` of the answers on the desired tag.\n\nThis is exactly what you will do over the next few questions.","text/markdown":"<span style=\"color:#33cc99\">Solution:</span> \n`posts_questions` has a column called `tags` which lists the topics/technologies each question is about.\n\n`posts_answers` has a column called `parent_id` which identifies the ID of the question each answer is responding to.\n`posts_answers` also has an `owner_user_id` column which specifies the ID of the user who answered the question.\n\nYou can join these two tables to:\n- determine the `tags` for each answer, and then\n- select the `owner_user_id` of the answers on the desired tag.\n\nThis is exactly what you will do over the next few questions.\n"},"metadata":{}}],"execution_count":13},{"cell_type":"markdown","source":"### 3) Selecting the right questions\n\nA lot of this data is text. \n\nWe'll explore one last technique in this course which you can apply to this text.\n\nA **WHERE** clause can limit your results to rows with certain text using the **LIKE** feature. For example, to select just the third row of the `pets` table from the tutorial, we could use the query in the picture below.\n\n![](https://storage.googleapis.com/kaggle-media/learn/images/RccsXBr.png) \n\nYou can also use `%` as a \"wildcard\" for any number of characters. So you can also get the third row with:\n\n```\nquery = \"\"\"\n        SELECT * \n        FROM `bigquery-public-data.pet_records.pets` \n        WHERE Name LIKE '%ipl%'\n        \"\"\"\n```\n\nTry this yourself. Write a query that selects the `id`, `title` and `owner_user_id` columns from the `posts_questions` table. \n- Restrict the results to rows that contain the word \"bigquery\" in the `tags` column. \n- Include rows where there is other text in addition to the word \"bigquery\" (e.g., if a row has a tag \"bigquery-sql\", your results should include that too).","metadata":{}},{"cell_type":"code","source":"# Your code here\nquestions_query = \"\"\"\n                  SELECT id, title, owner_user_id\n                  FROM `bigquery-public-data.stackoverflow.posts_questions`\n                  WHERE tags LIKE '%bigquery%'\n                  \"\"\"\n\n# Set up the query (cancel the query if it would use too much of \n# your quota, with the limit set to 1 GB)\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nquestions_query_job = client.query(questions_query, job_config=safe_config) # Your code goes here\n\n# API request - run the query, and return a pandas DataFrame\nquestions_results = questions_query_job.to_dataframe() # Your code goes here\n\n# Preview results\nprint(questions_results.head())\n\n# Check your answer\nq_3.check()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-19T16:11:09.027484Z","iopub.execute_input":"2024-12-19T16:11:09.027857Z","iopub.status.idle":"2024-12-19T16:11:13.471396Z","shell.execute_reply.started":"2024-12-19T16:11:09.027827Z","shell.execute_reply":"2024-12-19T16:11:13.468879Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/google/cloud/bigquery/table.py:1727: UserWarning: BigQuery Storage module not found, fetch data with the REST endpoint instead.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"         id                                              title  owner_user_id\n0  64345717  Loop by array and union looped result in BigQuery       13304769\n1  64610766  BigQuery Transfer jobs from S3 stuck pending o...       14549617\n2  64383871  How to get sum of values in days intervals usi...       12472644\n3  64251948                BigQuery get row above empty column        4572124\n4  64323398  SQL: Remove part of string that is in another ...        6089137\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.16666666666666666, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"3_SelectRightQuestions\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}],"execution_count":18},{"cell_type":"markdown","source":"For a hint or the solution, uncomment the appropriate line below.","metadata":{}},{"cell_type":"code","source":"#q_3.hint()\n#q_3.solution()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-19T16:11:25.906230Z","iopub.execute_input":"2024-12-19T16:11:25.906591Z","iopub.status.idle":"2024-12-19T16:11:25.910862Z","shell.execute_reply.started":"2024-12-19T16:11:25.906560Z","shell.execute_reply":"2024-12-19T16:11:25.909767Z"}},"outputs":[],"execution_count":19},{"cell_type":"markdown","source":"### 4) Your first join\nNow that you have a query to select questions on any given topic (in this case, you chose \"bigquery\"), you can find the answers to those questions with a **JOIN**.  \n\nWrite a query that returns the `id`, `body` and `owner_user_id` columns from the `posts_answers` table for answers to \"bigquery\"-related questions. \n- You should have one row in your results for each answer to a question that has \"bigquery\" in the tags.  \n- Remember you can get the tags for a question from the `tags` column in the `posts_questions` table.\n\nHere's a reminder of what a **JOIN** looked like in the tutorial:\n```\nquery = \"\"\"\n        SELECT p.Name AS Pet_Name, o.Name AS Owner_Name\n        FROM `bigquery-public-data.pet_records.pets` as p\n        INNER JOIN `bigquery-public-data.pet_records.owners` as o \n            ON p.ID = o.Pet_ID\n        \"\"\"\n```\n\nIt may be useful to scroll up and review the first several rows of the `posts_answers` and `posts_questions` tables.  ","metadata":{}},{"cell_type":"code","source":"# Your code here\nanswers_query = \"\"\"\n                SELECT a.id, a.body, a.owner_user_id\n                FROM `bigquery-public-data.stackoverflow.posts_questions` as q\n                INNER JOIN `bigquery-public-data.stackoverflow.posts_answers` as a\n                    ON q.id = a.parent_id\n                WHERE q.tags LIKE '%bigquery%'\n                \"\"\"\n\n# Set up the query\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=27*10**10)\nanswers_query_job = client.query(answers_query, job_config=safe_config) # Your code goes here\n\n# API request - run the query, and return a pandas DataFrame\nanswers_results = answers_query_job.to_dataframe() # Your code goes here\n\n# Preview results\nprint(answers_results.head())\n\n# Check your answer\nq_4.check()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-19T16:24:15.617643Z","iopub.execute_input":"2024-12-19T16:24:15.618019Z","iopub.status.idle":"2024-12-19T16:24:35.299444Z","shell.execute_reply.started":"2024-12-19T16:24:15.617987Z","shell.execute_reply":"2024-12-19T16:24:35.298189Z"}},"outputs":[{"name":"stdout","text":"         id                                               body  owner_user_id\n0  43889859  <p>Elliot's comment was correct, it looks like...        7714325\n1  43893203  <p>Based on Elliott's suggestion, I got the jo...         877513\n2  43902608  <p>after UNNESTing an array, use MAX() instead...        4736890\n3  43903837  <p>The query I wanted to run was to categorise...        7370593\n4  43915451  <p>You can query into a destination table with...         437019\n","output_type":"stream"},{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/learntools/sql/ex6.py:129: FutureWarning: Calling int on a single element Series is deprecated and will raise a TypeError in the future. Use int(ser.iloc[0]) instead\n  correct_owner_user_id = int(answers_answer[answers_answer[\"id\"] == first_id][\"owner_user_id\"])\n/usr/local/lib/python3.10/dist-packages/learntools/sql/ex6.py:130: FutureWarning: Calling int on a single element Series is deprecated and will raise a TypeError in the future. Use int(ser.iloc[0]) instead\n  submitted_owner_user_id = int(results[results[\"id\"] == first_id][\"owner_user_id\"])\n","output_type":"stream"},{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"outcomeType\": 1, \"valueTowardsCompletion\": 0.16666666666666666, \"interactionType\": 1, \"questionType\": 2, \"questionId\": \"4_FirstJoin\", \"learnToolsVersion\": \"0.3.4\", \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\"}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Correct","text/markdown":"<span style=\"color:#33cc33\">Correct</span>"},"metadata":{}}],"execution_count":25},{"cell_type":"markdown","source":"For a hint or the solution, uncomment the appropriate line below.","metadata":{}},{"cell_type":"code","source":"#q_4.hint()\n#q_4.solution()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-19T16:48:40.875736Z","iopub.execute_input":"2024-12-19T16:48:40.876544Z","iopub.status.idle":"2024-12-19T16:48:40.882783Z","shell.execute_reply.started":"2024-12-19T16:48:40.876495Z","shell.execute_reply":"2024-12-19T16:48:40.881206Z"}},"outputs":[],"execution_count":27},{"cell_type":"markdown","source":"### 5) Answer the question\nYou have the merge you need. But you want a list of users who have answered many questions... which requires more work beyond your previous result.\n\nWrite a new query that has a single row for each user who answered at least one question with a tag that includes the string \"bigquery\". Your results should have two columns:\n- `user_id` - contains the `owner_user_id` column from the `posts_answers` table\n- `number_of_answers` - contains the number of answers the user has written to \"bigquery\"-related questions","metadata":{}},{"cell_type":"code","source":"# Your code here\nbigquery_experts_query = \"\"\"\n                         SELECT a.owner_user_id AS user_id, COUNT(1) AS number_of_answers\n                         FROM `bigquery-public-data.stackoverflow.posts_questions` AS q\n                         INNER JOIN `bigquery-public-data.stackoverflow.posts_answers` AS a\n                             ON q.id = a.parent_Id\n                         WHERE q.tags LIKE '%bigquery%'\n                         GROUP BY a.owner_user_id\n                         \"\"\"\n\n# Set up the query\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nbigquery_experts_query_job = client.query(bigquery_experts_query, job_config=safe_config) # Your code goes here\n\n# API request - run the query, and return a pandas DataFrame\nbigquery_experts_results = bigquery_experts_query_job.to_dataframe() # Your code goes here\n\n# Preview results\nprint(bigquery_experts_results.head())\n\n# Check your answer\nq_5.check()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-19T17:40:47.932862Z","iopub.execute_input":"2024-12-19T17:40:47.933357Z","iopub.status.idle":"2024-12-19T17:40:50.262390Z","shell.execute_reply.started":"2024-12-19T17:40:47.933319Z","shell.execute_reply":"2024-12-19T17:40:50.260802Z"}},"outputs":[{"name":"stderr","text":"/usr/local/lib/python3.10/dist-packages/google/cloud/bigquery/table.py:1727: UserWarning: BigQuery Storage module not found, fetch data with the REST endpoint instead.\n  warnings.warn(\n","output_type":"stream"},{"name":"stdout","text":"    user_id  number_of_answers\n0   4650934                  1\n1   2157547                  1\n2   3011380                  1\n3   9447598                  8\n4  15745884                 24\n","output_type":"stream"},{"traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-44-02ccf43675c2>\u001b[0m in \u001b[0;36m<cell line: 22>\u001b[0;34m()\u001b[0m\n\u001b[1;32m     20\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     21\u001b[0m \u001b[0;31m# Check your answer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 22\u001b[0;31m \u001b[0mq_5\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcheck\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/learntools/core/problem_view.py\u001b[0m in \u001b[0;36mwrapped\u001b[0;34m(self, *args, **kwargs)\u001b[0m\n\u001b[1;32m     22\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mwrapped\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     23\u001b[0m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0minteractions\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mmethod\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__name__\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m+=\u001b[0m \u001b[0;36m1\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 24\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     25\u001b[0m     \u001b[0;32mreturn\u001b[0m \u001b[0mwrapped\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     26\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/learntools/core/problem_view.py\u001b[0m in \u001b[0;36mwrapped\u001b[0;34m(*args, **kwargs)\u001b[0m\n\u001b[1;32m     13\u001b[0m     \u001b[0;34m@\u001b[0m\u001b[0mfunctools\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwraps\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mfn\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     14\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mwrapped\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 15\u001b[0;31m         \u001b[0mres\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mfn\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     16\u001b[0m         \u001b[0mdisplay\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mres\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     17\u001b[0m         \u001b[0;31m# Don't propagate the return to avoid double printing.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/learntools/core/problem_view.py\u001b[0m in \u001b[0;36mcheck\u001b[0;34m(self)\u001b[0m\n\u001b[1;32m     89\u001b[0m                 \u001b[0margs\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     90\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mproblem\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcheck_whether_attempted\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 91\u001b[0;31m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mproblem\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcheck\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m*\u001b[0m\u001b[0margs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     92\u001b[0m         \u001b[0;32mexcept\u001b[0m \u001b[0mNotAttempted\u001b[0m \u001b[0;32mas\u001b[0m \u001b[0me\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     93\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_track_check\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mtracking\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mOutcomeType\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mUNATTEMPTED\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/learntools/sql/ex6.py\u001b[0m in \u001b[0;36mcheck\u001b[0;34m(self, query, results)\u001b[0m\n\u001b[1;32m    192\u001b[0m         \u001b[0;32massert\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'number_of_answers'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'You do not have a `number_of_answers` column in your results.'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    193\u001b[0m         \u001b[0;31m# check 3: correct user IDs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 194\u001b[0;31m         \u001b[0mcorrect_ids\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mbigquery_experts_answer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0muser_id\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misnan\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    195\u001b[0m         \u001b[0msubmitted_ids\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0muser_id\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misnan\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    196\u001b[0m         \u001b[0;32massert\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mcorrect_ids\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0msubmitted_ids\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'You seem to have the wrong values in the `user_id` column.'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.10/dist-packages/learntools/sql/ex6.py\u001b[0m in \u001b[0;36m<listcomp>\u001b[0;34m(.0)\u001b[0m\n\u001b[1;32m    192\u001b[0m         \u001b[0;32massert\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'number_of_answers'\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'You do not have a `number_of_answers` column in your results.'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    193\u001b[0m         \u001b[0;31m# check 3: correct user IDs\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 194\u001b[0;31m         \u001b[0mcorrect_ids\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mbigquery_experts_answer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0muser_id\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misnan\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    195\u001b[0m         \u001b[0msubmitted_ids\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mset\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mint\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;32mfor\u001b[0m \u001b[0mi\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mresults\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0muser_id\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mvalues\u001b[0m \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mnp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0misnan\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mi\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    196\u001b[0m         \u001b[0;32massert\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0mcorrect_ids\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0msubmitted_ids\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m(\u001b[0m\u001b[0;34m'You seem to have the wrong values in the `user_id` column.'\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32mmissing.pyx\u001b[0m in \u001b[0;36mpandas._libs.missing.NAType.__bool__\u001b[0;34m()\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: boolean value of NA is ambiguous"],"ename":"TypeError","evalue":"boolean value of NA is ambiguous","output_type":"error"}],"execution_count":44},{"cell_type":"markdown","source":"For a hint or the solution, uncomment the appropriate line below.","metadata":{}},{"cell_type":"code","source":"#q_5.hint()\nq_5.solution()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-19T17:00:37.269979Z","iopub.execute_input":"2024-12-19T17:00:37.270656Z","iopub.status.idle":"2024-12-19T17:00:37.280550Z","shell.execute_reply.started":"2024-12-19T17:00:37.270599Z","shell.execute_reply":"2024-12-19T17:00:37.279037Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 3, \"questionType\": 2, \"questionId\": \"5_BigQueryExperts\", \"learnToolsVersion\": \"0.3.4\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Solution: \n```python\n\nbigquery_experts_query = \"\"\"\n                         SELECT a.owner_user_id AS user_id, COUNT(1) AS number_of_answers\n                         FROM `bigquery-public-data.stackoverflow.posts_questions` AS q\n                         INNER JOIN `bigquery-public-data.stackoverflow.posts_answers` AS a\n                             ON q.id = a.parent_Id\n                         WHERE q.tags LIKE '%bigquery%'\n                         GROUP BY a.owner_user_id\n                         \"\"\"\n\n# Set up the query (cancel the query if it would use too much of \n# your quota, with the limit set to 1 GB)\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nbigquery_experts_query_job = client.query(bigquery_experts_query, job_config=safe_config)\n\n# API request - run the query, and return a pandas DataFrame\nbigquery_experts_results = bigquery_experts_query_job.to_dataframe()\n\n```","text/markdown":"<span style=\"color:#33cc99\">Solution:</span> \n```python\n\nbigquery_experts_query = \"\"\"\n                         SELECT a.owner_user_id AS user_id, COUNT(1) AS number_of_answers\n                         FROM `bigquery-public-data.stackoverflow.posts_questions` AS q\n                         INNER JOIN `bigquery-public-data.stackoverflow.posts_answers` AS a\n                             ON q.id = a.parent_Id\n                         WHERE q.tags LIKE '%bigquery%'\n                         GROUP BY a.owner_user_id\n                         \"\"\"\n\n# Set up the query (cancel the query if it would use too much of \n# your quota, with the limit set to 1 GB)\nsafe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)\nbigquery_experts_query_job = client.query(bigquery_experts_query, job_config=safe_config)\n\n# API request - run the query, and return a pandas DataFrame\nbigquery_experts_results = bigquery_experts_query_job.to_dataframe()\n\n```"},"metadata":{}}],"execution_count":33},{"cell_type":"markdown","source":"### 6) Building a more generally useful service\n\nHow could you convert what you've done to a general function a website could call on the backend to get experts on any topic?  \n\nThink about it and then check the solution below.","metadata":{}},{"cell_type":"code","source":"# Check your answer (Run this code cell to receive credit!)\nq_6.solution()","metadata":{"trusted":true,"execution":{"iopub.status.busy":"2024-12-19T17:21:13.030803Z","iopub.execute_input":"2024-12-19T17:21:13.031380Z","iopub.status.idle":"2024-12-19T17:21:13.042563Z","shell.execute_reply.started":"2024-12-19T17:21:13.031337Z","shell.execute_reply":"2024-12-19T17:21:13.040505Z"}},"outputs":[{"output_type":"display_data","data":{"text/plain":"<IPython.core.display.Javascript object>","application/javascript":"parent.postMessage({\"jupyterEvent\": \"custom.exercise_interaction\", \"data\": {\"interactionType\": 3, \"questionType\": 4, \"questionId\": \"6_GeneralizeExpertFinder\", \"learnToolsVersion\": \"0.3.4\", \"valueTowardsCompletion\": 0.0, \"failureMessage\": \"\", \"exceptionClass\": \"\", \"trace\": \"\", \"outcomeType\": 4}}, \"*\")"},"metadata":{}},{"output_type":"display_data","data":{"text/plain":"Solution: \n```python\n\ndef expert_finder(topic, client):\n    '''\n    Returns a DataFrame with the user IDs who have written Stack Overflow answers on a topic.\n\n    Inputs:\n        topic: A string with the topic of interest\n        client: A Client object that specifies the connection to the Stack Overflow dataset\n\n    Outputs:\n        results: A DataFrame with columns for user_id and number_of_answers. Follows similar logic to bigquery_experts_results shown above.\n    '''\n    my_query = \"\"\"\n               SELECT a.owner_user_id AS user_id, COUNT(1) AS number_of_answers\n               FROM `bigquery-public-data.stackoverflow.posts_questions` AS q\n               INNER JOIN `bigquery-public-data.stackoverflow.posts_answers` AS a\n                   ON q.id = a.parent_Id\n               WHERE q.tags like '%{topic}%'\n               GROUP BY a.owner_user_id\n               \"\"\"\n               \n    # Set up the query (a real service would have good error handling for \n    # queries that scan too much data)\n    safe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)      \n    my_query_job = client.query(my_query, job_config=safe_config)\n    \n    # API request - run the query, and return a pandas DataFrame\n    results = my_query_job.to_dataframe()\n\n    return results\n\n```","text/markdown":"<span style=\"color:#33cc99\">Solution:</span> \n```python\n\ndef expert_finder(topic, client):\n    '''\n    Returns a DataFrame with the user IDs who have written Stack Overflow answers on a topic.\n\n    Inputs:\n        topic: A string with the topic of interest\n        client: A Client object that specifies the connection to the Stack Overflow dataset\n\n    Outputs:\n        results: A DataFrame with columns for user_id and number_of_answers. Follows similar logic to bigquery_experts_results shown above.\n    '''\n    my_query = \"\"\"\n               SELECT a.owner_user_id AS user_id, COUNT(1) AS number_of_answers\n               FROM `bigquery-public-data.stackoverflow.posts_questions` AS q\n               INNER JOIN `bigquery-public-data.stackoverflow.posts_answers` AS a\n                   ON q.id = a.parent_Id\n               WHERE q.tags like '%{topic}%'\n               GROUP BY a.owner_user_id\n               \"\"\"\n               \n    # Set up the query (a real service would have good error handling for \n    # queries that scan too much data)\n    safe_config = bigquery.QueryJobConfig(maximum_bytes_billed=10**10)      \n    my_query_job = client.query(my_query, job_config=safe_config)\n    \n    # API request - run the query, and return a pandas DataFrame\n    results = my_query_job.to_dataframe()\n\n    return results\n\n```"},"metadata":{}}],"execution_count":39},{"cell_type":"markdown","source":"# Congratulations!\n\nYou know all the key components to use BigQuery and SQL effectively. Your SQL skills are sufficient to unlock many of the world's largest datasets.\n\nWant to go play with your new powers?  Kaggle has BigQuery datasets available [here](https://www.kaggle.com/datasets?fileType=bigQuery).","metadata":{}},{"cell_type":"markdown","source":"---\n\n\n\n\n*Have questions or comments? Visit the [course discussion forum](https://www.kaggle.com/learn/intro-to-sql/discussion) to chat with other learners.*","metadata":{}}]}